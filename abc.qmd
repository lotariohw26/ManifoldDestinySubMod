---
title: "Python"
---

<p id=ary></p>
<p id=nmb></p>
<p id=str></p>
    
<head>
      <script src="https://cdn.jsdelivr.net/pyodide/v0.24.1/full/pyodide.js"></script>
</head>
<body>
    Pyodide test page <br>
    Open your browser console to see Pyodide output
    <script type="text/javascript">
      async function main(){
        let pyodide = await loadPyodide();
        console.log(pyodide.runPython(`
            import sys
            sys.version
        `));
        pyodide.runPython("print(1*5)");
      }
      main();
    </script>
</body>

```{r}
knitr::knit_exit()
```

<html>
  <head>
    <script src="https://cdn.jsdelivr.net/pyodide/v0.24.1/full/pyodide.js"></script>
  </head>

  <body>
    <p>
      You can execute any Python code. Just enter something in the box below and
      click the button.
    </p>
    <input id="code" value="sum([1, 2, 3, 4, 5])" />
    <button onclick="evaluatePython()">Run</button>
    <br />
    <br />
    <div>Output:</div>
    <textarea id="output" style="width: 100%;" rows="6" disabled></textarea>

    <script>
      const output = document.getElementById("output");
      const code = document.getElementById("code");

      function addToOutput(s) {
        output.value += ">>>" + code.value + "\n" + s + "\n";
      }

      output.value = "Initializing...\n";
      // init Pyodide
      async function main() {
        let pyodide = await loadPyodide();
        output.value += "Ready!\n";
        return pyodide;
      }
      let pyodideReadyPromise = main();

      async function evaluatePython() {
        let pyodide = await pyodideReadyPromise;
        try {
          let output = pyodide.runPython(code.value);
          addToOutput(output);
        } catch (err) {
          addToOutput(err);
        }
      }
    </script>
  </body>
</html>

#! fix deviation from mean
import sympy, pandas, numpy
from sympy import solve, Eq, symbols, latex, simplify, diff, poly, sympify, Matrix, pprint, collect, expand, Poly, Symbol, Pow
def rall(sel=[0, 0, 0]):
    n, m = symbols('n m')
    
    rxy = Matrix([[m, -n, 0], 
                  [n, m, 0],
                  [0, 0, 1]])
    
    rxz = Matrix([[m, 0, -n], 
                  [0, 1, 0],
                  [n, 0, m]])
    
    ryx = Matrix([[m, n, 0], 
                  [-n, m, 0],
                  [0, 0, 1]])
    
    ryz = Matrix([[1, 0, 0], 
                  [0, m, -n],
                  [0, n, m]])
    
    rzx = Matrix([[m, 0, n], 
                  [0, 1, 0],
                  [-n, 0, m]])
    
    rzy = Matrix([[1, 0, 0], 
                  [0, m, n],
                  [0, -n, m]])
    
    ps = [0, rxy, rxz, ryx, ryz, rzx, rzy]
    
    allrot = [ps[i] for i in sel]
    return allrot

def genpolycoeff(expr=None, solvd='z', solvf='u0', eur=[1, 4, 2], plr=3,dnr=2):
    sympy.var('alpha x y g h n m zeta Gamma lamda ui')
    x, y, z = sympy.symbols('x y z')
    sum_eur = sum(eur)
    # Without rotation
    if sum_eur == 0:
        exprc = expr + '-' + solvd
        asexpr = sympify(exprc)
        polys = poly(asexpr, sympify(solvf)).all_coeffs()
        abc = []
        uvw = []
        ABCDE = [0, 0, 0, 0, 0]
        ABCDE[:len(polys)] = polys
        return ABCDE, abc, uvw
    # With rotation
    else:
        expr = ['k0+k1*x+k2*y', 'k0+k1*x+k2*y+k3*x**2+k4*x*y+k5*y**2', 'k0+k1*x+k2*y+k3*x**2+k4*x*y+k5*y**2+k6*x**3+k7*x**2*y+k8*y**2*x+k9*y**3'][plr-1]
        dxyz = {'x': 1, 'y': 2, 'z': 3}
        # Defining
        x,  y,  z  = sympy.symbols('x y z')
        ui, vi, wi = sympy.symbols('ui vi wi')
        u0, v0, w0 = sympy.symbols('u0 v0 w0')
        u1, v1, w1 = sympy.symbols('u1 v1 w1')
        u2, v2, w2 = sympy.symbols('u2 v2 w2')
        a1, a2, a3 = sympy.symbols('a1 a2 a3')
        b1, b2, b3 = sympy.symbols('b1 b2 b3')
        c1, c2, c3 = sympy.symbols('c1 c2 c3')
        m1, m2, m3 = sympy.symbols('m1 m2 m3')
        n1, n2, n3 = sympy.symbols('n1 n2 n3')
        mu, mv, mw = sympy.symbols('mu mv mw')
        # Replace
        PS = rall(sel=eur)
        r0 = Matrix([u0, v0, w0])
        r1 = PS[0].subs([(n, n1), (m, m1)]) * r0
        r2 = PS[1].subs([(n, n2), (m, m2)]) * r1
        RR = PS[2].subs([(n, n3), (m, m3)]) * r2
        sympy.expand(RR.row(0)[0])
        sympy.expand(RR.row(1)[0])
        sympy.expand(RR.row(2)[0])
        av = sympy.collect(sympy.expand(RR.row(0)[0]), (u0, v0, w0))
        bv = sympy.collect(sympy.expand(RR.row(1)[0]), (u0, v0, w0))
        cv = sympy.collect(sympy.expand(RR.row(2)[0]), (u0, v0, w0))
        a1s = av.coeff(u0)
        a2s = av.coeff(v0)
        a3s = av.coeff(w0)
        b1s = bv.coeff(u0)
        b2s = bv.coeff(v0)
        b3s = bv.coeff(w0)
        c1s = cv.coeff(u0)
        c2s = cv.coeff(v0)
        c3s = cv.coeff(w0)
        Eu = Eq(x, a1s * u0 + a2s * v0 + a3s * w0)
        Ev = Eq(y, b1s * u0 + b2s * v0 + b3s * w0)
        Ew = Eq(z, c1s * u0 + c2s * v0 + c3s * w0)
        abc = [a1s, a2s, a3s, b1s, b2s, b3s, c1s, c2s, c3s]
        # Manual
        pvar = [w0, v0, u0, w0**2, v0*w0, v0**2, u0*w0, u0*v0, u0**2, w0**3, v0*w0**2, v0**2*w0, v0**2*w0, v0**3, u0*w0**2, u0*v0*w0, u0*v0**2, u0**2*w0, u0**2*v0, u0**3]
        # Connect to rotmat
        Eu = Eq(x, a1 * u0 + a2 * v0 + a3 * w0)
        Ev = Eq(y, b1 * u0 + b2 * v0 + b3 * w0)
        Ew = Eq(z, c1 * u0 + c2 * v0 + c3 * w0)
        exprf = sympify(expr + '-' + solvd)
        exprc = exprf.subs([(x, solve(Eu, x)[0]), (y, solve(Ev, y)[0]), (z, solve(Ew, z)[0])])
        exprr = collect(expand(exprc), pvar)
        xr = [] 
        yr = []
        zr = []
        clma = ['u0','v0','w0','d','var','expr','expr2']
        eqsn = len(exprr.args)
        data = [["0"] * 7 for _ in range(eqsn)]
        matarch = pandas.DataFrame(data, columns=clma)
        matarch.loc[0, ['expr','expr2']]=exprr.args[0]
        matarch.loc[0, ['d']]='d_000'
        for i in range(1, eqsn):
            expt = exprr.args[i]
            expr = expt.args[-1]
            varn = expt / expr
            nrfs = len(varn.free_symbols)
            matarch.loc[i, 'var'] = str(varn)
            for j in range(0,nrfs):
                varn = expt.args[j].as_base_exp()[0]
                pown = expt.args[j].as_base_exp()[1]
                matarch.loc[i, str(varn)] = pown
            subd = {a1: a1s, a2: a2s, a3: a3s,b1: b1s, b2: b2s, b3: b3s,c1: c1s, c2: c2s, c3: c3s}
            matarch.loc[i, 'expr'] = expr
            matarch.loc[i, 'expr2'] = expr.subs(subd) 
            cmbx = int(matarch.loc[i, 'u0'])
            cmby = int(matarch.loc[i, 'v0'])
            cmbz = int(matarch.loc[i, 'w0'])
            dr = sum([cmbx, cmby, cmbz])
            matarch.loc[i,'d']='d_'+"".join([str(dr),str(cmbx),str(cmby)])
    dic1 = matarch.set_index('d')['expr'].to_dict()
    dic2 = matarch.set_index('d')['expr2'].to_dict()
    dic = [dic1,dic2][0]
    A=[dic['d_330'],
       dic['d_303'],
       dic['d_300']]
    B=[dic['d_320']*z+dic['d_321']*y+dic['d_220'],
       dic['d_302']*z+dic['d_312']*x+dic['d_202'],
       dic['d_301']*x+dic['d_310']*y+dic['d_200']]
    C=[dic['d_310']*z**2+dic['d_311']*y*z+dic['d_312']*y**2+dic['d_210']*z+dic['d_211']*y+dic['d_110'],
       dic['d_301']*z**2+dic['d_311']*y*z+dic['d_321']*y**2+dic['d_201']*z+dic['d_211']*y+dic['d_101'],
       dic['d_302']*z**2+dic['d_311']*y*z+dic['d_320']*y**2+dic['d_201']*z+dic['d_210']*y+dic['d_110']]
    D=[dic['d_300']*z**3+dic['d_301']*y*z**2+dic['d_302']*y**2*z+dic['d_303']*y**3+dic['d_200']*z**2+dic['d_201']*y*z+dic['d_202']*y**2+dic['d_100']*z+dic['d_101']*y+dic['d_000'],
       dic['d_300']*z**3+dic['d_310']*y*z**2+dic['d_320']*y**2*z+dic['d_330']*y**3+dic['d_200']*z**2+dic['d_210']*y*z+dic['d_220']*y**2+dic['d_100']*z+dic['d_110']*y+dic['d_000'],
       dic['d_303']*z**3+dic['d_312']*y*z**2+dic['d_321']*y**2*z+dic['d_330']*y**3+dic['d_202']*z**2+dic['d_211']*y*z+dic['d_220']*y**2+dic['d_101']*z+dic['d_110']*y+dic['d_000']]
    E=[0,0,0,0]
    nrs = dxyz[solvd]-1
    ABCDE = [0, 0, 0, 0, 0]
    ABCDE[0] = str(A[nrs])
    ABCDE[1] = str(B[nrs])
    ABCDE[2] = str(C[nrs])
    ABCDE[3] = str(D[nrs])
    ABCDE[4] = str(E[nrs])
    msl = ['u0','v0','w0','expr','expr2']
    matarch[msl]=matarch[msl].astype(str)
    return ABCDE, matarch, abc
